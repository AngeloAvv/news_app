// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package it.angelocassano.news_app;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.google.gson.annotations.SerializedName;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Article {
    @SerializedName("title")
    private @NonNull String title;
    public @NonNull String getTitle() { return title; }
    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    @SerializedName("description")
    private @NonNull String descr;
    public @NonNull String getDescr() { return descr; }
    public void setDescr(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"descr\" is null.");
      }
      this.descr = setterArg;
    }

    @SerializedName("urlToImage")
    private @Nullable String urlToImage;
    public @Nullable String getUrlToImage() { return urlToImage; }
    public void setUrlToImage(@Nullable String setterArg) {
      this.urlToImage = setterArg;
    }

    @SerializedName("url")
    private @NonNull String url;
    public @NonNull String getUrl() { return url; }
    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    @SerializedName("publishedAt")
    private @Nullable String publishedAt;
    public @Nullable String getPublishedAt() { return publishedAt; }
    public void setPublishedAt(@Nullable String setterArg) {
      this.publishedAt = setterArg;
    }

    @SerializedName("content")
    private @Nullable String content;
    public @Nullable String getContent() { return content; }
    public void setContent(@Nullable String setterArg) {
      this.content = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private Article() {}
    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String descr;
      public @NonNull Builder setDescr(@NonNull String setterArg) {
        this.descr = setterArg;
        return this;
      }
      private @Nullable String urlToImage;
      public @NonNull Builder setUrlToImage(@Nullable String setterArg) {
        this.urlToImage = setterArg;
        return this;
      }
      private @Nullable String url;
      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable String publishedAt;
      public @NonNull Builder setPublishedAt(@Nullable String setterArg) {
        this.publishedAt = setterArg;
        return this;
      }
      private @Nullable String content;
      public @NonNull Builder setContent(@Nullable String setterArg) {
        this.content = setterArg;
        return this;
      }
      public @NonNull Article build() {
        Article pigeonReturn = new Article();
        pigeonReturn.setTitle(title);
        pigeonReturn.setDescr(descr);
        pigeonReturn.setUrlToImage(urlToImage);
        pigeonReturn.setUrl(url);
        pigeonReturn.setPublishedAt(publishedAt);
        pigeonReturn.setContent(content);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("descr", descr);
      toMapResult.put("urlToImage", urlToImage);
      toMapResult.put("url", url);
      toMapResult.put("publishedAt", publishedAt);
      toMapResult.put("content", content);
      return toMapResult;
    }
    static @NonNull Article fromMap(@NonNull Map<String, Object> map) {
      Article pigeonResult = new Article();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object descr = map.get("descr");
      pigeonResult.setDescr((String)descr);
      Object urlToImage = map.get("urlToImage");
      pigeonResult.setUrlToImage((String)urlToImage);
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object publishedAt = map.get("publishedAt");
      pigeonResult.setPublishedAt((String)publishedAt);
      Object content = map.get("content");
      pigeonResult.setContent((String)content);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ArticleApiCodec extends StandardMessageCodec {
    public static final ArticleApiCodec INSTANCE = new ArticleApiCodec();
    private ArticleApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Article.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Article) {
        stream.write(128);
        writeValue(stream, ((Article) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ArticleApi {
    void articles(Result<List<Article>> result);

    /** The codec used by ArticleApi. */
    static MessageCodec<Object> getCodec() {
      return ArticleApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ArticleApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ArticleApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ArticleApi.articles", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<Article>> resultCallback = new Result<List<Article>>() {
                public void success(List<Article> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.articles(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
